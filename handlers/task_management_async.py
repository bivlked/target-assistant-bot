from __future__ import annotations

from datetime import datetime

from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from core.goal_manager import GoalManager
from utils.helpers import format_date
from sheets.client import COL_DATE, COL_DAYOFWEEK, COL_TASK, COL_STATUS


def build_async_handlers(goal_manager: GoalManager) -> CommandHandler:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CommandHandler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /today_async.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AsyncSheetsManager –≤–Ω—É—Ç—Ä–∏ GoalManager.
    """

    async def today_async(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not getattr(goal_manager, "sheets_async", None):
            await update.message.reply_text("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return

        user_id = update.effective_user.id
        date_str = format_date(datetime.now())
        task = await goal_manager.sheets_async.get_task_for_date(user_id, date_str)  # type: ignore[attr-defined]
        if task:
            text = (
                f"üìÖ –ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({task[COL_DATE]}, {task[COL_DAYOFWEEK]}):\n\n"
                f"üìù {task[COL_TASK]}\n\n–°—Ç–∞—Ç—É—Å: {task[COL_STATUS]}"
            )
        else:
            text = "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é /setgoal."
        await update.message.reply_text(text)

    return CommandHandler("today_async", today_async) 