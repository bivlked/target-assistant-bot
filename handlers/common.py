"""Common handlers for the Telegram bot with multi-goal support."""

from __future__ import annotations

import sentry_sdk
import structlog
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.dependency_injection import get_async_storage
from scheduler.tasks import Scheduler
from utils.subscription import is_subscribed, subscribe_user
from core.metrics import USER_COMMANDS_TOTAL

logger = structlog.get_logger(__name__)

# Text constants
WELCOME_TEXT = (
    "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Target Assistant Bot!\n\n"
    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
    "‚Ä¢ üìù –°—Ç–∞–≤–∏—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–ª—è–º–∏\n"
    "‚Ä¢ üìã –°–æ–∑–¥–∞–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–ª–∞–Ω—ã\n"
    "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    "‚Ä¢ üí™ –ü–æ–ª—É—á–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é\n\n"
    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á\n"
    "‚Ä¢ –£–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
    "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets\n\n"
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_goals –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏!"
)

HELP_TEXT = (
    "ü§ñ –ü–æ–º–æ—â—å –ø–æ Target Assistant Bot\n\n"
    "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "‚Ä¢ /my_goals - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏\n"
    "‚Ä¢ /add_goal - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)\n"
    "‚Ä¢ /setgoal - —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å (—á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥)\n"
    "‚Ä¢ /today - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
    "‚Ä¢ /status - –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    "‚Ä¢ /check - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
    "‚Ä¢ /motivation - –ø–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
    "‚Ä¢ /reset - —Å–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
    "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥–æ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
    "‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Ç–µ–≥–∏\n"
    "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
    "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã\n\n"
    "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å Google Sheets!"
)

CANCEL_TEXT = "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."

UNKNOWN_TEXT = (
    "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
)

RESET_SUCCESS_TEXT = (
    "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n"
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
)


def start_handler(scheduler: Scheduler):
    """Factory to create the /start command handler with multi-goal support.

    The /start command subscribes the user and sets up their environment.

    Args:
        scheduler: Instance of Scheduler to add user-specific jobs.

    Returns:
        An asynchronous handler function for `CommandHandler`.
    """

    async def _handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        USER_COMMANDS_TOTAL.labels(command_name="/start").inc()
        user_id = update.effective_user.id
        sentry_sdk.set_tag("user_id", user_id)

        # Subscribe user
        subscribe_user(user_id)

        # Setup user spreadsheet
        storage = get_async_storage()
        await storage.create_spreadsheet(user_id)

        # Add scheduler jobs
        scheduler.add_user_jobs(context.bot, user_id)

        # Welcome message with inline buttons
        keyboard = [
            [InlineKeyboardButton("üéØ –ú–æ–∏ —Ü–µ–ª–∏", callback_data="back_to_goals")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å", callback_data="add_goal")],
            [
                InlineKeyboardButton(
                    "üìä –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="show_spreadsheet"
                )
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            WELCOME_TEXT,
            reply_markup=reply_markup,
        )

    return _handler


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the /help command, sending a help message."""
    USER_COMMANDS_TOTAL.labels(command_name="/help").inc()
    user_id = update.effective_user.id
    sentry_sdk.set_tag("user_id", user_id)

    await update.message.reply_text(HELP_TEXT, disable_web_page_preview=True)


async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the /cancel command, typically used to exit conversations."""
    USER_COMMANDS_TOTAL.labels(command_name="/cancel").inc()
    user_id = update.effective_user.id
    sentry_sdk.set_tag("user_id", user_id)

    await update.message.reply_text(CANCEL_TEXT)


async def reset_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles the /reset command - deletes all user data."""
    USER_COMMANDS_TOTAL.labels(command_name="/reset").inc()
    user_id = update.effective_user.id
    sentry_sdk.set_tag("user_id", user_id)

    if not await is_subscribed(user_id):
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return

    # Confirm deletion
    keyboard = [
        [
            InlineKeyboardButton("‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="confirm_reset"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n"
        "‚Ä¢ –í—Å–µ –≤–∞—à–∏ —Ü–µ–ª–∏\n"
        "‚Ä¢ –í—Å–µ –ø–ª–∞–Ω—ã –∏ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ Google Sheets —Ç–∞–±–ª–∏—Ü—É\n"
        "‚Ä¢ –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=reply_markup,
    )


async def confirm_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirm and execute reset."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    storage = get_async_storage()

    try:
        # Delete spreadsheet
        await storage.delete_spreadsheet(user_id)

        await query.edit_message_text(
            RESET_SUCCESS_TEXT + "\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )

    except Exception as e:
        logger.error(f"Error resetting user data: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


async def cancel_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel reset operation."""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text("‚ùå –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.")


async def unknown_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles unknown commands."""
    USER_COMMANDS_TOTAL.labels(command_name="unknown").inc()
    user_id = update.effective_user.id
    sentry_sdk.set_tag("user_id", user_id)

    await update.message.reply_text(UNKNOWN_TEXT)
