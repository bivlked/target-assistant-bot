"""Command handlers for multi-goal management."""

import structlog
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from typing import List, Dict, Any
from datetime import datetime, timezone, timedelta

from core.dependency_injection import get_async_llm, get_async_storage
from core.models import Goal, GoalPriority, GoalStatus, TaskStatus
from utils.helpers import format_date, get_day_of_week, escape_markdown_v2
from utils.subscription import is_subscribed
from sheets.client import PLAN_HEADERS

logger = structlog.get_logger(__name__)

# Conversation states
(
    GOAL_NAME,
    GOAL_DESCRIPTION,
    GOAL_DEADLINE,
    GOAL_DAILY_TIME,
    GOAL_PRIORITY,
    GOAL_TAGS,
    GOAL_CONFIRM,
    SELECT_GOAL,
    EDIT_FIELD,
    EDIT_VALUE,
) = range(10)


async def my_goals_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user's goals overview. Can be called from command or callback."""
    if update.callback_query:
        query = update.callback_query
        if not query or not query.from_user:
            return
        await query.answer()
        user_id = query.from_user.id

        # Callback query - edit message
        if not await is_subscribed(user_id):
            await query.edit_message_text(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
            return

        storage = get_async_storage()
        stats = await storage.get_overall_statistics(user_id)

        if stats["total_goals"] == 0:
            await query.edit_message_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_goal –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏."
            )
            return

        # Build message
        message = "üéØ *–í–∞—à–∏ —Ü–µ–ª–∏:*\n\n"

        # Active goals
        if stats["active_count"] > 0:
            message += "‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:*\n"
            for goal in stats["active_goals"]:
                status_emoji = (
                    "üî¥"
                    if goal.priority == GoalPriority.HIGH
                    else "üü°" if goal.priority == GoalPriority.MEDIUM else "üü¢"
                )
                message += f"{status_emoji} *{goal.name}* (ID: {goal.goal_id})\n"
                message += f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {goal.progress_percent}%\n"
                message += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {goal.deadline}\n"
                if goal.tags:
                    message += f"   üè∑Ô∏è –¢–µ–≥–∏: {', '.join(goal.tags)}\n"
                message += "\n"

        # Summary
        message += "\nüìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Ü–µ–ª–µ–π: {stats['total_goals']}\n"
        message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_count']}\n"
        message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_count']}\n"
        message += f"‚Ä¢ –í –∞—Ä—Ö–∏–≤–µ: {stats['archived_count']}\n"

        if stats["active_count"] > 0:
            message += f"‚Ä¢ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {stats['total_progress']}%\n"

        # Buttons
        keyboard = []

        if stats["can_add_more"]:
            keyboard.append(
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="add_goal")]
            )

        if stats["active_count"] > 0:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏", callback_data="manage_goals"
                    )
                ]
            )

        keyboard.append(
            [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ —Ü–µ–ª–µ–π", callback_data="show_spreadsheet")]
        )

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message,
            parse_mode="Markdown",
            reply_markup=reply_markup,
        )
    else:
        # Regular message
        if not update.effective_user or not update.message:
            return
        user_id = update.effective_user.id

        if not await is_subscribed(user_id):
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
            return

        storage = get_async_storage()
        stats = await storage.get_overall_statistics(user_id)

        if stats["total_goals"] == 0:
            await update.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_goal –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏."
            )
            return

        # Build message
        message = "üéØ *–í–∞—à–∏ —Ü–µ–ª–∏:*\n\n"

        # Active goals
        if stats["active_count"] > 0:
            message += "‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:*\n"
            for goal in stats["active_goals"]:
                status_emoji = (
                    "üî¥"
                    if goal.priority == GoalPriority.HIGH
                    else "üü°" if goal.priority == GoalPriority.MEDIUM else "üü¢"
                )
                message += f"{status_emoji} *{goal.name}* (ID: {goal.goal_id})\n"
                message += f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {goal.progress_percent}%\n"
                message += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {goal.deadline}\n"
                if goal.tags:
                    message += f"   üè∑Ô∏è –¢–µ–≥–∏: {', '.join(goal.tags)}\n"
                message += "\n"

        # Summary
        message += "\nüìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ —Ü–µ–ª–µ–π: {stats['total_goals']}\n"
        message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_count']}\n"
        message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_count']}\n"
        message += f"‚Ä¢ –í –∞—Ä—Ö–∏–≤–µ: {stats['archived_count']}\n"

        if stats["active_count"] > 0:
            message += f"‚Ä¢ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {stats['total_progress']}%\n"

        # Buttons
        keyboard = []

        if stats["can_add_more"]:
            keyboard.append(
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="add_goal")]
            )

        if stats["active_count"] > 0:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏", callback_data="manage_goals"
                    )
                ]
            )

        keyboard.append(
            [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ —Ü–µ–ª–µ–π", callback_data="show_spreadsheet")]
        )

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message,
            parse_mode="Markdown",
            reply_markup=reply_markup,
        )


async def add_goal_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start adding a new goal via CallbackQuery."""
    query = update.callback_query
    if not query or not query.from_user:
        return ConversationHandler.END

    await query.answer()
    user_id = query.from_user.id
    reply_method = query.edit_message_text
    message_to_reply = (
        query.message
    )  # For potential error messages not editing the current one

    storage = get_async_storage()
    active_count = await storage.get_active_goals_count(user_id)
    if active_count >= 10:
        await reply_method(
            escape_markdown_v2(
                "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π (10).\n"
                "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–µ–ª–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö."
            ),
            parse_mode="MarkdownV2",
        )
        return ConversationHandler.END

    await reply_method(
        escape_markdown_v2(
            "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏*\n\n"
            "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò–∑—É—á–∏—Ç—å Python')"
        ),
        parse_mode="MarkdownV2",
    )
    return GOAL_NAME


async def add_goal_command_start(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Start adding a new goal via /add_goal command."""
    if not update.message or not update.effective_user:
        return ConversationHandler.END

    user_id = update.effective_user.id
    reply_method = update.message.reply_text

    # Check subscription status first for command entry
    if not await is_subscribed(user_id):
        await reply_method(
            escape_markdown_v2(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            ),
            parse_mode="MarkdownV2",
        )
        return ConversationHandler.END

    storage = get_async_storage()
    active_count = await storage.get_active_goals_count(user_id)
    if active_count >= 10:
        await reply_method(
            escape_markdown_v2(
                "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π (10).\n"
                "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–µ–ª–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö."
            ),
            parse_mode="MarkdownV2",
        )
        return ConversationHandler.END

    await reply_method(
        escape_markdown_v2(
            "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏*\n\n"
            "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò–∑—É—á–∏—Ç—å Python')"
        ),
        parse_mode="MarkdownV2",
    )
    return GOAL_NAME


async def goal_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle goal name input."""
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ callback
    if not update.message or not update.message.text:
        return GOAL_NAME  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    goal_name = update.message.text.strip()
    if len(goal_name) < 3:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return GOAL_NAME

    context.user_data["goal_name"] = goal_name

    await update.message.reply_text(
        "–®–∞–≥ 2/6: –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n" "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å?"
    )

    return GOAL_DESCRIPTION


async def goal_description_received(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Handle goal description input."""
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message or not update.message.text:
        return GOAL_DESCRIPTION

    goal_description = update.message.text.strip()
    if len(goal_description) < 10:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return GOAL_DESCRIPTION

    context.user_data["goal_description"] = goal_description

    await update.message.reply_text(
        "–®–∞–≥ 3/6: –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '3 –º–µ—Å—è—Ü–∞', '6 –Ω–µ–¥–µ–ª—å', '90 –¥–Ω–µ–π'"
    )

    return GOAL_DEADLINE


async def goal_deadline_received(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Handle goal deadline input."""
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message or not update.message.text:
        return GOAL_DEADLINE

    context.user_data["goal_deadline"] = update.message.text.strip()

    await update.message.reply_text(
        "–®–∞–≥ 4/6: –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —ç—Ç–æ–π —Ü–µ–ª–∏?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '1 —á–∞—Å', '30 –º–∏–Ω—É—Ç', '2 —á–∞—Å–∞'"
    )

    return GOAL_DAILY_TIME


async def goal_daily_time_received(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Handle daily time input."""
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message or not update.message.text:
        return GOAL_DAILY_TIME

    context.user_data["goal_daily_time"] = update.message.text.strip()

    # Priority buttons
    keyboard = [
        [
            InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="priority_high"),
            InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium"),
            InlineKeyboardButton("üü¢ –ù–∏–∑–∫–∏–π", callback_data="priority_low"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–®–∞–≥ 5/6: –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–∏:",
        reply_markup=reply_markup,
    )

    return GOAL_PRIORITY


async def goal_priority_received(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Handle priority selection."""
    query = update.callback_query
    if not query or not query.data:
        return GOAL_PRIORITY

    await query.answer()

    priority_map = {
        "priority_high": GoalPriority.HIGH,
        "priority_medium": GoalPriority.MEDIUM,
        "priority_low": GoalPriority.LOW,
    }

    context.user_data["goal_priority"] = priority_map[query.data]

    await query.edit_message_text(
        "–®–∞–≥ 6/6: –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —Ü–µ–ª–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–∞—Ä—å–µ—Ä–∞, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'"
    )

    return GOAL_TAGS


async def goal_tags_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle tags input and show confirmation."""
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not update.message or not update.message.text:
        return GOAL_TAGS

    tags_text = update.message.text.strip()

    if tags_text == "-":
        tags = []
    else:
        tags = [tag.strip() for tag in tags_text.split(",") if tag.strip()]

    context.user_data["goal_tags"] = tags

    # Show summary
    priority_text = {
        GoalPriority.HIGH: "üî¥ –í—ã—Å–æ–∫–∏–π",
        GoalPriority.MEDIUM: "üü° –°—Ä–µ–¥–Ω–∏–π",
        GoalPriority.LOW: "üü¢ –ù–∏–∑–∫–∏–π",
    }

    summary = "üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏:*\n\n"
    summary += f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {context.user_data['goal_name']}\n"
    summary += f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['goal_description']}\n"
    summary += f"*–°—Ä–æ–∫:* {context.user_data['goal_deadline']}\n"
    summary += f"*–í—Ä–µ–º—è –≤ –¥–µ–Ω—å:* {context.user_data['goal_daily_time']}\n"
    summary += f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {priority_text[context.user_data['goal_priority']]}\n"

    if tags:
        summary += f"*–¢–µ–≥–∏:* {', '.join(tags)}\n"

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_goal"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_goal"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        summary,
        parse_mode="Markdown",
        reply_markup=reply_markup,
    )

    return GOAL_CONFIRM


async def goal_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Create the goal and generate plan."""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return ConversationHandler.END

    await query.answer()

    if query.data == "cancel_goal":
        await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    user_id = query.from_user.id
    storage = get_async_storage()
    llm = get_async_llm()

    await query.edit_message_text(
        "‚è≥ –°–æ–∑–¥–∞—é —Ü–µ–ª—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )

    try:
        # Get next goal ID
        goal_id = await storage.get_next_goal_id(user_id)

        # Create goal object
        if not context.user_data or not all(
            key in context.user_data
            for key in [
                "goal_name",
                "goal_description",
                "goal_deadline",
                "goal_daily_time",
                "goal_priority",
                "goal_tags",
            ]
        ):
            if query:
                await query.edit_message_text(
                    escape_markdown_v2("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã."),
                    parse_mode="MarkdownV2",
                )
            return ConversationHandler.END

        current_time_utc = datetime.now(timezone.utc)
        goal_start_date_str = format_date(current_time_utc)

        goal = Goal(
            goal_id=goal_id,
            name=context.user_data["goal_name"],
            description=context.user_data["goal_description"],
            deadline=context.user_data["goal_deadline"],
            daily_time=context.user_data["goal_daily_time"],
            start_date=goal_start_date_str,
            status=GoalStatus.ACTIVE,
            priority=context.user_data["goal_priority"],
            tags=context.user_data["goal_tags"],
            progress_percent=0,
        )

        # Save goal
        await storage.save_goal_info(user_id, goal)

        # Generate plan from LLM
        raw_plan_from_llm: List[Dict[str, Any]] = await llm.generate_plan(
            goal.description,
            goal.deadline,
            goal.daily_time,
        )

        # Transform plan to the format expected by SheetsManager
        start_date_dt = datetime.strptime(goal.start_date, "%d.%m.%Y").replace(
            tzinfo=timezone.utc
        )
        formatted_plan_for_sheets = []
        for i, item_from_llm in enumerate(raw_plan_from_llm):
            current_task_date_dt = start_date_dt + timedelta(days=i)
            task_description = item_from_llm.get(
                "task", item_from_llm.get("–æ–ø–∏—Å–∞–Ω–∏–µ", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
            )
            if not isinstance(task_description, str):
                task_description = str(task_description)

            formatted_plan_for_sheets.append(
                {
                    PLAN_HEADERS["–î–∞—Ç–∞"]: format_date(current_task_date_dt),
                    PLAN_HEADERS["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"]: get_day_of_week(current_task_date_dt),
                    PLAN_HEADERS["–ó–∞–¥–∞—á–∞"]: task_description,
                    PLAN_HEADERS["–°—Ç–∞—Ç—É—Å"]: TaskStatus.NOT_DONE.value,
                }
            )

        # Save plan
        await storage.save_plan(user_id, goal_id, formatted_plan_for_sheets)

        # Calculate total days from the formatted plan that was actually saved
        total_days = len(formatted_plan_for_sheets)

        await query.edit_message_text(
            f"‚úÖ –¶–µ–ª—å '{goal.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìÖ –ü–ª–∞–Ω —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {total_days} –¥–Ω–µ–π.\n"
            f"üöÄ –ù–∞—á–∏–Ω–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /today —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
        )

    except Exception as e:
        logger.error("Error creating goal", exc_info=e)
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )

    return ConversationHandler.END


async def manage_goals_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show goals management menu."""
    query = update.callback_query
    if not query or not query.from_user:
        return

    await query.answer()

    user_id = query.from_user.id
    storage = get_async_storage()

    goals = await storage.get_active_goals(user_id)

    if not goals:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.")
        return

    keyboard = []

    # Add button for each goal
    for goal in goals:
        emoji = (
            "üî¥"
            if goal.priority == GoalPriority.HIGH
            else "üü°" if goal.priority == GoalPriority.MEDIUM else "üü¢"
        )
        button_text = f"{emoji} {goal.name} ({goal.progress_percent}%)"
        keyboard.append(
            [InlineKeyboardButton(button_text, callback_data=f"goal_{goal.goal_id}")]
        )

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_goals")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup,
    )


async def show_goal_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show detailed information about a specific goal."""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return

    await query.answer()

    goal_id = int(query.data.split("_")[1])
    user_id = query.from_user.id
    storage = get_async_storage()

    goal = await storage.get_goal_by_id(user_id, goal_id)
    if not goal:
        await query.edit_message_text("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    stats = await storage.get_goal_statistics(user_id, goal_id)

    priority_text = {
        GoalPriority.HIGH: "üî¥ –í—ã—Å–æ–∫–∏–π",
        GoalPriority.MEDIUM: "üü° –°—Ä–µ–¥–Ω–∏–π",
        GoalPriority.LOW: "üü¢ –ù–∏–∑–∫–∏–π",
    }

    status_text = {
        GoalStatus.ACTIVE: "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è",
        GoalStatus.COMPLETED: "üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è",
        GoalStatus.ARCHIVED: "üì¶ –í –∞—Ä—Ö–∏–≤–µ",
    }

    message = f"üéØ *{goal.name}*\n\n"
    message += f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {goal.description}\n"
    message += f"*–°—Ç–∞—Ç—É—Å:* {status_text[goal.status]}\n"
    message += f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {priority_text[goal.priority]}\n"
    message += f"*–°—Ä–æ–∫:* {goal.deadline}\n"
    message += f"*–í—Ä–µ–º—è –≤ –¥–µ–Ω—å:* {goal.daily_time}\n"
    message += f"*–ù–∞—á–∞–ª–æ:* {goal.start_date}\n"

    if goal.tags:
        message += f"*–¢–µ–≥–∏:* {', '.join(goal.tags)}\n"

    message += "\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    message += f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats.progress_percent}%\n"
    message += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {stats.completed_tasks} –∏–∑ {stats.total_tasks}\n"
    message += f"‚Ä¢ –î–Ω–µ–π –ø—Ä–æ—à–ª–æ: {stats.days_elapsed}\n"
    message += f"‚Ä¢ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {stats.days_remaining}\n"

    if stats.is_on_track:
        message += "‚Ä¢ ‚úÖ –ò–¥–µ—Ç–µ –ø–æ –ø–ª–∞–Ω—É\n"
    else:
        message += "‚Ä¢ ‚ö†Ô∏è –û—Ç—Å—Ç–∞–µ—Ç–µ –æ—Ç –ø–ª–∞–Ω–∞\n"

    keyboard = [
        [
            InlineKeyboardButton(
                "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_goal_{goal_id}"
            )
        ],
        [
            InlineKeyboardButton(
                "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_plan_{goal_id}"
            )
        ],
    ]

    if goal.status == GoalStatus.ACTIVE:
        keyboard.append(
            [
                InlineKeyboardButton(
                    "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_goal_{goal_id}"
                ),
                InlineKeyboardButton(
                    "üì¶ –í –∞—Ä—Ö–∏–≤", callback_data=f"archive_goal_{goal_id}"
                ),
            ]
        )

    keyboard.append(
        [
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_goal_{goal_id}"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_goals"),
        ]
    )

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        message,
        parse_mode="Markdown",
        reply_markup=reply_markup,
    )


async def complete_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Mark goal as completed."""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return

    await query.answer()

    goal_id = int(query.data.split("_")[2])
    user_id = query.from_user.id
    storage = get_async_storage()

    await storage.update_goal_status(user_id, goal_id, GoalStatus.COMPLETED)

    await query.edit_message_text(
        "üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" "–í—ã –ø—Ä–æ–¥–µ–ª–∞–ª–∏ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É! üéâ"
    )


async def archive_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Archive a goal."""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return

    await query.answer()

    goal_id = int(query.data.split("_")[2])
    user_id = query.from_user.id
    storage = get_async_storage()

    await storage.archive_goal(user_id, goal_id)

    await query.edit_message_text("üì¶ –¶–µ–ª—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.")


async def delete_goal_confirm(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Show deletion confirmation."""
    query = update.callback_query
    if not query or not query.data:
        return

    await query.answer()

    goal_id = int(query.data.split("_")[2])

    keyboard = [
        [
            InlineKeyboardButton(
                "‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_goal_yes_{goal_id}"
            ),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_goals"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–µ–ª—å?\n"
        "–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.",
        parse_mode="Markdown",
        reply_markup=reply_markup,
    )


async def delete_goal_execute(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Delete goal after confirmation."""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return

    await query.answer()

    goal_id = int(query.data.split("_")[3])
    user_id = query.from_user.id
    storage = get_async_storage()

    await storage.delete_goal(user_id, goal_id)

    await query.edit_message_text("üóëÔ∏è –¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞.")


async def show_spreadsheet_link(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Show spreadsheet link."""
    query = update.callback_query
    if not query or not query.from_user:
        return

    await query.answer()

    user_id = query.from_user.id
    storage = get_async_storage()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL
    spreadsheet_url = await storage.get_spreadsheet_url(user_id)

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_goals")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üìä *–í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ü–µ–ª–µ–π:*\n\n{spreadsheet_url}",
        parse_mode="Markdown",
        reply_markup=reply_markup,
        disable_web_page_preview=True,
    )


async def cancel_conversation(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Cancel goal creation conversation."""
    if update.message:
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


# Create conversation handler for adding goals
add_goal_conversation = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(add_goal_start, pattern="^add_goal$"),
        CommandHandler("add_goal", add_goal_command_start),  # Added CommandHandler
    ],
    states={
        GOAL_NAME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, goal_name_received)
        ],
        GOAL_DESCRIPTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, goal_description_received)
        ],
        GOAL_DEADLINE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, goal_deadline_received)
        ],
        GOAL_DAILY_TIME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, goal_daily_time_received)
        ],
        GOAL_PRIORITY: [
            CallbackQueryHandler(goal_priority_received, pattern="^priority_")
        ],
        GOAL_TAGS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, goal_tags_received)
        ],
        GOAL_CONFIRM: [
            CallbackQueryHandler(goal_confirmed, pattern="^(confirm|cancel)_goal$")
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_conversation),
        CommandHandler("my_goals", cancel_conversation),  # Allow going back
    ],
    per_message=False,
    conversation_timeout=300,  # 5 minutes timeout
)


def get_goals_handlers():
    """Get all goals-related handlers."""
    return [
        CommandHandler("my_goals", my_goals_command),
        add_goal_conversation,
        CallbackQueryHandler(manage_goals_menu, pattern="^manage_goals$"),
        CallbackQueryHandler(show_goal_details, pattern="^goal_\\d+$"),
        CallbackQueryHandler(complete_goal, pattern="^complete_goal_\\d+$"),
        CallbackQueryHandler(archive_goal, pattern="^archive_goal_\\d+$"),
        CallbackQueryHandler(delete_goal_confirm, pattern="^delete_goal_\\d+$"),
        CallbackQueryHandler(delete_goal_execute, pattern="^delete_goal_yes_\\d+$"),
        CallbackQueryHandler(show_spreadsheet_link, pattern="^show_spreadsheet$"),
        CallbackQueryHandler(my_goals_command, pattern="^back_to_goals$"),
    ]
