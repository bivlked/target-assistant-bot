from __future__ import annotations

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
)

from core.goal_manager import GoalManager, STATUS_DONE, STATUS_NOT_DONE, STATUS_PARTIAL
from sheets.client import COL_DATE, COL_DAYOFWEEK, COL_TASK, COL_STATUS

CHOOSING_STATUS = 0


def build_task_handlers(goal_manager: GoalManager):
    async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
        task = goal_manager.get_today_task(update.effective_user.id)
        if task:
            text = (
                f"üìÖ –ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({task[COL_DATE]}, {task[COL_DAYOFWEEK]}):\n\n"
                f"üìù {task[COL_TASK]}\n\n–°—Ç–∞—Ç—É—Å: {task[COL_STATUS]}"
            )
        else:
            text = "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é /setgoal."
        await update.message.reply_text(text)

    async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
        data = goal_manager.get_detailed_status(update.effective_user.id)

        # –ï—Å–ª–∏ —Ü–µ–ª–∏ –µ—â—ë –Ω–µ—Ç
        if not data.get("goal"):
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setgoal, —á—Ç–æ–±—ã –µ—ë —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á—ë—Ç
        msg_lines: list[str] = []
        msg_lines.append(f"üéØ *–¶–µ–ª—å*: {data['goal']}")
        msg_lines.append("")
        msg_lines.append(
            f"üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å*: {data['progress_percent']}%  (‚úÖ {data['completed_days']}/{data['total_days']} –¥–Ω–µ–π)"
        )
        msg_lines.append(
            f"‚è± *–ü—Ä–æ—à–ª–æ*: {data['days_passed']} –¥–Ω.   |   ‚åõÔ∏è *–û—Å—Ç–∞–ª–æ—Å—å*: {data['days_left']} –¥–Ω."
        )

        upcoming = data.get("upcoming_tasks", [])
        if upcoming:
            msg_lines.append("")
            msg_lines.append("üìù *–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏*:")
            for i, task in enumerate(upcoming, 1):
                date = task.get(COL_DATE) or task.get("date")
                text = task.get(COL_TASK) or task.get("text")
                status = task.get(COL_STATUS) or task.get("status")
                status_emoji = "‚úÖ" if status == "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" else "‚¨ú"
                msg_lines.append(f"{status_emoji} {i}. {date}: {text}")

        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
        msg_lines.append("")
        msg_lines.append(f"üìà [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({data['sheet_url']})")

        await update.message.reply_text("\n".join(msg_lines), parse_mode="Markdown", disable_web_page_preview=True)

    # ------------- CHECK -------------

    async def check_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
        task = goal_manager.get_today_task(update.effective_user.id)
        if not task:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é /setgoal.")
            return ConversationHandler.END
        if task[COL_STATUS] == STATUS_DONE:
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. ‚úÖ")
            return ConversationHandler.END

        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=STATUS_DONE),
                    InlineKeyboardButton("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=STATUS_NOT_DONE),
                ],
                [InlineKeyboardButton("ü§î –ß–∞—Å—Ç–∏—á–Ω–æ", callback_data=STATUS_PARTIAL)],
            ]
        )
        await update.message.reply_text(
            f"–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å –ø–æ –∑–∞–¥–∞—á–µ:\n\nüìù {task[COL_TASK]}\n\n–û—Ç–º–µ—Ç—å—Ç–µ —Å—Ç–∞—Ç—É—Å:",
            reply_markup=keyboard,
        )
        return CHOOSING_STATUS

    async def check_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        status = query.data
        goal_manager.update_today_task_status(update.effective_user.id, status)
        await query.edit_message_text("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω! üí™")
        return ConversationHandler.END

    async def motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        msg = goal_manager.generate_motivation_message(update.effective_user.id)
        await update.message.reply_text(msg)

    check_conv = ConversationHandler(
        entry_points=[CommandHandler("check", check_entry)],
        states={
            CHOOSING_STATUS: [CallbackQueryHandler(check_button)],
        },
        fallbacks=[],
        name="check_conv",
        persistent=False,
    )

    return today, status, motivation, check_conv 