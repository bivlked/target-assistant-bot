from __future__ import annotations

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
)

from core.goal_manager import GoalManager, STATUS_DONE, STATUS_NOT_DONE, STATUS_PARTIAL

CHOOSING_STATUS = 0


def build_task_handlers(goal_manager: GoalManager):
    async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
        task = goal_manager.get_today_task(update.effective_user.id)
        if task:
            text = (
                f"üìÖ –ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({task['Date']}, {task['DayOfWeek']}):\n\n"
                f"üìù {task['Task']}\n\n–°—Ç–∞—Ç—É—Å: {task['Status']}"
            )
        else:
            text = "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é /setgoal."
        await update.message.reply_text(text)

    async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = goal_manager.get_goal_status_details(update.effective_user.id)
        await update.message.reply_text(text)

    # ------------- CHECK -------------

    async def check_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
        task = goal_manager.get_today_task(update.effective_user.id)
        if not task:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å —Å –ø–æ–º–æ—â—å—é /setgoal.")
            return ConversationHandler.END
        if task["Status"] == STATUS_DONE:
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. ‚úÖ")
            return ConversationHandler.END

        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=STATUS_DONE),
                    InlineKeyboardButton("‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=STATUS_NOT_DONE),
                ],
                [InlineKeyboardButton("ü§î –ß–∞—Å—Ç–∏—á–Ω–æ", callback_data=STATUS_PARTIAL)],
            ]
        )
        await update.message.reply_text(
            f"–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å –ø–æ –∑–∞–¥–∞—á–µ:\n\nüìù {task['Task']}\n\n–û—Ç–º–µ—Ç—å—Ç–µ —Å—Ç–∞—Ç—É—Å:",
            reply_markup=keyboard,
        )
        return CHOOSING_STATUS

    async def check_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        status = query.data
        goal_manager.update_today_task_status(update.effective_user.id, status)
        await query.edit_message_text("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω! üí™")
        return ConversationHandler.END

    async def motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        msg = goal_manager.generate_motivation_message(update.effective_user.id)
        await update.message.reply_text(msg)

    check_conv = ConversationHandler(
        entry_points=[CommandHandler("check", check_entry)],
        states={
            CHOOSING_STATUS: [CallbackQueryHandler(check_button)],
        },
        fallbacks=[],
        name="check_conv",
        persistent=False,
    )

    return today, status, motivation, check_conv 