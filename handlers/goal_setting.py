from __future__ import annotations

import re
from datetime import timedelta, datetime
from typing import Final, cast, Any, Dict

from telegram import Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

from core.goal_manager import GoalManager
from utils.period_parser import parse_period
from core.metrics import USER_COMMANDS_TOTAL

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
TEXT_GOAL: Final = 0
DEADLINE: Final = 1
AVAILABLE_TIME: Final = 2


# ------------------------------
# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
# ------------------------------


def _validate_deadline(text: str):
    """Validates that the user-provided deadline string is within 90 days.

    Supports numeric ("30 days") and Russian word-based numbers ("–æ–¥–∏–Ω –º–µ—Å—è—Ü").
    If no explicit number is found for units like 'week' or 'month', it assumes 1.

    Args:
        text: The user-input string for the deadline.

    Returns:
        True if the deadline is valid (<= 90 days), False otherwise.
    """
    txt = text.lower()

    # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–æ–π
    num_match = re.search(r"(\d+)", txt)
    if num_match:
        num = int(num_match.group(1))
    else:
        # 2. –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ–≤–µ—Å–Ω—ã–µ —á–∏—Å–ª–∞
        words_map = {
            "–æ–¥–∏–Ω": 1,
            "–æ–¥–Ω–∞": 1,
            "–¥–≤–∞": 2,
            "–¥–≤–µ": 2,
            "—Ç—Ä–∏": 3,
            "—á–µ—Ç—ã—Ä–µ": 4,
            "–ø—è—Ç—å": 5,
            "—à–µ—Å—Ç—å": 6,
            "—Å–µ–º—å": 7,
            "–≤–æ—Å–µ–º—å": 8,
            "–¥–µ–≤—è—Ç—å": 9,
            "–¥–µ—Å—è—Ç—å": 10,
        }
        num = None
        for w, val in words_map.items():
            if re.search(rf"\b{w}\b", txt):
                num = val
                break
        # 3. –ï—Å–ª–∏ —á–∏—Å–ª–æ —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –Ω–æ –µ—Å—Ç—å —Å–ª–æ–≤–æ '–º–µ—Å—è—Ü/–Ω–µ–¥–µ–ª—è/–¥–µ–Ω—å' ‚Äì –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º 1
        if num is None and ("–º–µ—Å—è—Ü" in txt or "–Ω–µ–¥–µ–ª" in txt or "–¥–µ–Ω—å" in txt):
            num = 1

    if num is None:
        return False

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if "–Ω–µ–¥" in txt:
        days = num * 7
    elif "–º–µ—Å—è—Ü" in txt or "–º–µ—Å" in txt:
        days = num * 30
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏
        days = num

    return days <= 90


async def _ask_deadline(update: Update):
    """Sends a message asking the user for the goal deadline."""
    assert update.message is not None
    await update.message.reply_text(
        "–ó–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞ 2 –º–µ—Å—è—Ü–∞', '–∑–∞ 6 –Ω–µ–¥–µ–ª—å', '–∑–∞ 50 –¥–Ω–µ–π')? –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ 3 –º–µ—Å—è—Ü–µ–≤."
    )


async def _ask_available_time(update: Update):
    """Sends a message asking the user for their daily time commitment."""
    assert update.message is not None
    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '30 –º–∏–Ω—É—Ç', '1-2 —á–∞—Å–∞')?"
    )


# ------------------------------
# –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è ConversationHandler
# ------------------------------


def build_setgoal_conv(goal_manager: GoalManager) -> ConversationHandler:
    """Builds the ConversationHandler for the /setgoal command flow.

    Args:
        goal_manager: Instance of GoalManager to process the new goal.

    Returns:
        A ConversationHandler instance for PTB.
    """

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        USER_COMMANDS_TOTAL.labels(command_name="/setgoal").inc()
        assert update.message is not None
        await update.message.reply_text(
            "–ö–∞–∫—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å? –û–ø–∏—à–∏—Ç–µ –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        )
        return TEXT_GOAL

    async def input_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
        assert update.message is not None
        text_raw = update.message.text or ""
        text = text_raw.strip()
        if len(text) < 10:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
            )
            return TEXT_GOAL
        data_dict = cast(Dict[str, Any], context.user_data)
        data_dict["goal_text"] = text
        await _ask_deadline(update)
        return DEADLINE

    async def input_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
        assert update.message is not None
        text_raw = update.message.text or ""
        text = text_raw.strip()
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ä–æ–∫ –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 90 –¥–Ω–µ–π
        try:
            days = parse_period(text)
            if days > 90:
                raise ValueError
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ä–æ–∫ <= 3 –º–µ—Å—è—Ü–µ–≤."
            )
            return DEADLINE

        data_dict = cast(Dict[str, Any], context.user_data)
        data_dict["deadline"] = text
        await _ask_available_time(update)
        return AVAILABLE_TIME

    async def input_available_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
        assert update.message is not None
        text_raw = update.message.text or ""
        text = text_raw.strip()
        data_dict = cast(Dict[str, Any], context.user_data)
        data_dict["available_time"] = text
        await update.message.reply_text(
            "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )

        data_dict = cast(Dict[str, Any], context.user_data)
        goal_text = data_dict["goal_text"]
        deadline = data_dict["deadline"]
        available_time = data_dict["available_time"]
        assert update.effective_user is not None
        user_id = update.effective_user.id

        try:
            spreadsheet_url = await goal_manager.set_new_goal(
                user_id, goal_text, deadline, available_time
            )
            await update.message.reply_text(
                f"‚úÖ –í–∞—à–∞ —Ü–µ–ª—å *{goal_text}* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. \n"
                f"üìÑ [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({spreadsheet_url})\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /today, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∏ /check –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.",
                parse_mode="Markdown",
                disable_web_page_preview=True,
            )
        except Exception as e:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            raise
        return ConversationHandler.END

    async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
        assert update.message is not None
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    return ConversationHandler(
        entry_points=[CommandHandler("setgoal", start)],
        states={
            TEXT_GOAL: [
                MessageHandler(filters.Text() & ~filters.Command(), input_goal)
            ],
            DEADLINE: [
                MessageHandler(filters.Text() & ~filters.Command(), input_deadline)
            ],
            AVAILABLE_TIME: [
                MessageHandler(
                    filters.Text() & ~filters.Command(), input_available_time
                )
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        block=True,
        name="setgoal_conv",
        persistent=False,
    )
