"""Handler for the /setgoal conversation flow with multi-goal support."""

from __future__ import annotations

import sentry_sdk
import structlog
from datetime import datetime, timezone
from typing import Final, cast, Any, Dict

from telegram import Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

from core.dependency_injection import get_async_storage, get_async_llm
from core.models import Goal, GoalPriority, GoalStatus
from utils.helpers import format_date
from utils.period_parser import parse_period
from utils.subscription import is_subscribed
from core.metrics import USER_COMMANDS_TOTAL

logger = structlog.get_logger(__name__)

# ConversationHandler states
TEXT_GOAL: Final = 0
DEADLINE: Final = 1
AVAILABLE_TIME: Final = 2

# Text messages
PROMPT_GOAL_TEXT = (
    "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏*\n\n"
    "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ò–∑—É—á–∏—Ç—å Python –∏ —Å–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'"
)

PROMPT_DEADLINE_TEXT = (
    "üìÖ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.\n" "–ù–∞–ø—Ä–∏–º–µ—Ä: '3 –º–µ—Å—è—Ü–∞', '6 –Ω–µ–¥–µ–ª—å', '90 –¥–Ω–µ–π'"
)

PROMPT_AVAILABLE_TIME_TEXT = (
    "‚è∞ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —ç—Ç–æ–π —Ü–µ–ª–∏?\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: '1 —á–∞—Å', '30 –º–∏–Ω—É—Ç', '2 —á–∞—Å–∞'"
)

VALIDATE_GOAL_MIN_LENGTH_TEXT = (
    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
)

VALIDATE_DEADLINE_RANGE_TEXT = (
    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫. –£–∫–∞–∂–∏—Ç–µ –æ—Ç 1 –¥–æ 120 –¥–Ω–µ–π.\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: '2 –º–µ—Å—è—Ü–∞', '8 –Ω–µ–¥–µ–ª—å', '60 –¥–Ω–µ–π'"
)

GENERATING_PLAN_TEXT = "‚è≥ –°–æ–∑–¥–∞—é —Ü–µ–ª—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è..."

SETGOAL_SUCCESS_TEXT_TEMPLATE = (
    "‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
    "üéØ *–¶–µ–ª—å:* {goal_text}\n"
    "üìä –ü–ª–∞–Ω —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ {total_days} –¥–Ω–µ–π.\n\n"
    "üìã [–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É]({spreadsheet_url})\n\n"
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /today —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
)

SETGOAL_ERROR_TEXT = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

CONVERSATION_CANCELLED_TEXT = "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."


async def _ask_deadline(update: Update):
    """Sends a message asking the user for the goal deadline."""
    assert update.message is not None
    await update.message.reply_text(PROMPT_DEADLINE_TEXT)


async def _ask_available_time(update: Update):
    """Sends a message asking the user for their daily time commitment."""
    assert update.message is not None
    await update.message.reply_text(PROMPT_AVAILABLE_TIME_TEXT)


def build_setgoal_conv() -> ConversationHandler:
    """Builds the ConversationHandler for the /setgoal command flow."""

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        USER_COMMANDS_TOTAL.labels(command_name="/setgoal").inc()
        user_id = update.effective_user.id
        sentry_sdk.set_tag("user_id", user_id)

        if not await is_subscribed(user_id):
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
            return ConversationHandler.END

        # Check goal limit
        storage = get_async_storage()
        active_count = await storage.get_active_goals_count(user_id)
        if active_count >= 10:
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π (10).\n"
                "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–µ–ª–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_goals –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—è–º–∏."
            )
            return ConversationHandler.END

        await update.message.reply_text(PROMPT_GOAL_TEXT, parse_mode="Markdown")
        return TEXT_GOAL

    async def input_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        sentry_sdk.set_tag("user_id", user_id)

        text_raw = update.message.text or ""
        text = text_raw.strip()
        if len(text) < 10:
            await update.message.reply_text(VALIDATE_GOAL_MIN_LENGTH_TEXT)
            return TEXT_GOAL

        data_dict = cast(Dict[str, Any], context.user_data)
        data_dict["goal_text"] = text
        await _ask_deadline(update)
        return DEADLINE

    async def input_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        sentry_sdk.set_tag("user_id", user_id)

        text_raw = update.message.text or ""
        text = text_raw.strip()

        # Try to parse the period and ensure it does not exceed 120 days
        try:
            days = parse_period(text)
            if days <= 0 or days > 120:
                raise ValueError("Invalid day range")
        except ValueError:
            await update.message.reply_text(VALIDATE_DEADLINE_RANGE_TEXT)
            return DEADLINE

        data_dict = cast(Dict[str, Any], context.user_data)
        data_dict["deadline"] = text
        await _ask_available_time(update)
        return AVAILABLE_TIME

    async def input_available_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        sentry_sdk.set_tag("user_id", user_id)

        text_raw = update.message.text or ""
        text = text_raw.strip()
        data_dict = cast(Dict[str, Any], context.user_data)
        data_dict["available_time"] = text

        await update.message.reply_text(GENERATING_PLAN_TEXT)

        goal_text = data_dict["goal_text"]
        deadline = data_dict["deadline"]
        available_time = data_dict["available_time"]

        try:
            storage = get_async_storage()
            llm = get_async_llm()

            # Get next goal ID
            goal_id = await storage.get_next_goal_id(user_id)

            # Create goal object
            goal = Goal(
                goal_id=goal_id,
                name=f"–¶–µ–ª—å {goal_id}",  # Default name, user can change later
                description=goal_text,
                deadline=deadline,
                daily_time=available_time,
                start_date=format_date(datetime.now(timezone.utc)),
                status=GoalStatus.ACTIVE,
                priority=GoalPriority.MEDIUM,
                tags=[],
                progress_percent=0,
            )

            # Save goal
            spreadsheet_url = await storage.save_goal_info(user_id, goal)

            # Generate plan
            plan = await llm.generate_plan(goal_text, deadline, available_time)

            # Save plan
            await storage.save_plan(user_id, goal_id, plan)

            # Calculate total days
            total_days = len(plan)

            await update.message.reply_text(
                SETGOAL_SUCCESS_TEXT_TEMPLATE.format(
                    goal_text=goal_text,
                    total_days=total_days,
                    spreadsheet_url=spreadsheet_url,
                ),
                parse_mode="Markdown",
                disable_web_page_preview=True,
            )

        except Exception as e:
            logger.error(f"Error creating goal: {e}")
            await update.message.reply_text(SETGOAL_ERROR_TEXT)

        return ConversationHandler.END

    async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user:
            sentry_sdk.set_tag("user_id", update.effective_user.id)

        await update.message.reply_text(CONVERSATION_CANCELLED_TEXT)
        return ConversationHandler.END

    return ConversationHandler(
        entry_points=[CommandHandler("setgoal", start)],
        states={
            TEXT_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_goal)],
            DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_deadline)],
            AVAILABLE_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_available_time)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        block=True,
        name="setgoal_conv",
        persistent=False,
    )
