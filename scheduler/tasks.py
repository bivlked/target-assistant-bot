from __future__ import annotations

import logging
from datetime import datetime

from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Bot

from config import scheduler_cfg
from utils.helpers import get_day_of_week

logger = logging.getLogger(__name__)


class Scheduler:
    def __init__(self, goal_manager):
        self.goal_manager = goal_manager
        self.scheduler = BackgroundScheduler(timezone=scheduler_cfg.timezone)

    def add_user_jobs(self, bot: Bot, user_id: int):
        # –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
        hour, minute = map(int, scheduler_cfg.morning_time.split(":"))
        self.scheduler.add_job(
            self._send_today_task,
            "cron",
            args=[bot, user_id],
            hour=hour,
            minute=minute,
            id=f"morning_{user_id}",
            replace_existing=True,
        )

        # –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á–µ–∫-–∏–Ω
        hour, minute = map(int, scheduler_cfg.evening_time.split(":"))
        self.scheduler.add_job(
            self._send_evening_reminder,
            "cron",
            args=[bot, user_id],
            hour=hour,
            minute=minute,
            id=f"evening_{user_id}",
            replace_existing=True,
        )

        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.scheduler.add_job(
            self._send_motivation,
            "interval",
            args=[bot, user_id],
            hours=scheduler_cfg.motivation_interval_hours,
            id=f"motivation_{user_id}",
            replace_existing=True,
        )

    def start(self):
        if not self.scheduler.running:
            self.scheduler.start()

    # -------------------------------------------------
    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã
    # -------------------------------------------------
    def _send_today_task(self, bot: Bot, user_id: int):
        try:
            task = self.goal_manager.get_today_task(user_id)
            if task:
                text = (
                    f"üìÖ –ó–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({task['Date']}, {task['DayOfWeek']}):\n\n"
                    f"üìù {task['Task']}\n\n–°—Ç–∞—Ç—É—Å: {task['Status']}"
                )
            else:
                text = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /setgoal."
            bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–π –∑–∞–¥–∞—á–∏: %s", e)

    def _send_evening_reminder(self, bot: Bot, user_id: int):
        try:
            bot.send_message(chat_id=user_id, text="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /check! ‚úçÔ∏è")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: %s", e)

    def _send_motivation(self, bot: Bot, user_id: int):
        try:
            msg = self.goal_manager.generate_motivation_message(user_id)
            bot.send_message(chat_id=user_id, text=msg)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e) 